From 96f8aec6c620a921a00a9c1997ad724f4917c6c7 Mon Sep 17 00:00:00 2001
From: pennam <m.pennasilico@arduino.cc>
Date: Mon, 21 Feb 2022 11:32:33 +0100
Subject: [PATCH 134/204] TLSSocketWrapper: store SE050 keystore pointer and
 keyObject

---
 .../include/netsocket/TLSSocketWrapper.h        | 17 ++++++++++++++++-
 .../netsocket/source/TLSSocketWrapper.cpp       | 11 ++++-------
 2 files changed, 20 insertions(+), 8 deletions(-)

diff --git a/connectivity/netsocket/include/netsocket/TLSSocketWrapper.h b/connectivity/netsocket/include/netsocket/TLSSocketWrapper.h
index df476f27c4..968bb9170a 100644
--- a/connectivity/netsocket/include/netsocket/TLSSocketWrapper.h
+++ b/connectivity/netsocket/include/netsocket/TLSSocketWrapper.h
@@ -32,6 +32,16 @@
 #include "mbedtls/hmac_drbg.h"
 #include "mbedtls/error.h"
 
+#if defined(COMPONENT_SE050) && defined(MBEDTLS_ECDH_ALT) && SSS_HAVE_ALT_SSS
+extern "C" {
+#include "sss_mbedtls.h"
+}
+#include "ex_sss_boot.h"
+extern "C" {
+#include "ecdsa_verify_alt.h"
+}
+#endif
+
 // This class requires Mbed TLS SSL/TLS client code
 #if defined(MBEDTLS_SSL_CLI_C) || defined(DOXYGEN_ONLY)
 
@@ -149,7 +159,7 @@ public:
      */
     nsapi_error_t set_client_cert_key(const char *client_cert_pem, const char *client_private_key_pem);
 #if defined(COMPONENT_SE050) && defined(MBEDTLS_ECDH_ALT) && SSS_HAVE_ALT_SSS
-    nsapi_error_t set_client_cert_key(const void *client_cert, size_t client_cert_len, sss_object_t *pkeyObject);
+    nsapi_error_t set_client_cert_key(const void *client_cert, size_t client_cert_len, sss_object_t *pkeyObject, ex_sss_boot_ctx_t *deviceCtx);
 #endif
 
     /** Send data over a TLS socket.
@@ -332,6 +342,11 @@ private:
     mbedtls_pk_context _pkctx;
 #endif
 
+#if defined(COMPONENT_SE050) && defined(MBEDTLS_ECDH_ALT) && SSS_HAVE_ALT_SSS
+    sss_object_t *_sss_key_pair_ptr;
+    sss_key_store_t *_sss_ks_ptr;
+#endif
+
     DRBG_CTX _drbg;
 
     mbedtls_entropy_context _entropy;
diff --git a/connectivity/netsocket/source/TLSSocketWrapper.cpp b/connectivity/netsocket/source/TLSSocketWrapper.cpp
index c0b33dacee..48135fabf4 100644
--- a/connectivity/netsocket/source/TLSSocketWrapper.cpp
+++ b/connectivity/netsocket/source/TLSSocketWrapper.cpp
@@ -32,12 +32,6 @@
 #include "psa/crypto.h"
 #endif
 
-#if defined(COMPONENT_SE050) && defined(MBEDTLS_ECDH_ALT) && SSS_HAVE_ALT_SSS
-extern "C" {
-#include "sss_mbedtls.h"
-}
-#endif
-
 // This class requires Mbed TLS SSL/TLS client code
 #if defined(MBEDTLS_SSL_CLI_C)
 
@@ -213,7 +207,7 @@ nsapi_error_t TLSSocketWrapper::set_client_cert_key(const void *client_cert, siz
 
 #if defined(COMPONENT_SE050) && defined(MBEDTLS_ECDH_ALT) && SSS_HAVE_ALT_SSS
 nsapi_error_t TLSSocketWrapper::set_client_cert_key(const void *client_cert, size_t client_cert_len,
-                                                    sss_object_t *pkeyObject)
+                                                    sss_object_t *pkeyObject, ex_sss_boot_ctx_t *deviceCtx)
 {
 #if !defined(MBEDTLS_X509_CRT_PARSE_C) || !defined(MBEDTLS_PK_C)
     return NSAPI_ERROR_UNSUPPORTED;
@@ -242,6 +236,9 @@ nsapi_error_t TLSSocketWrapper::set_client_cert_key(const void *client_cert, siz
     set_own_cert(crt);
     _clicert_allocated = true;
 
+    _sss_key_pair_ptr = pkeyObject;
+    _sss_ks_ptr = &deviceCtx->ks;
+
     return NSAPI_ERROR_OK;
 #endif /* MBEDTLS_X509_CRT_PARSE_C */
 }
-- 
2.39.1

